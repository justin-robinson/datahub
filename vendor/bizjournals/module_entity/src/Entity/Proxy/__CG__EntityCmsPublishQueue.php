<?php

namespace Entity\Proxy\__CG__\Entity\Cms;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PublishQueue extends \Entity\Cms\PublishQueue implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queue_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'content_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'version', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'action', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'run_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queued_by', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queued_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'is_complete', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'completed_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'has_succeeded', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'has_failed', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'is_overridden', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'override_auditlog_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'Content');
        }

        return array('__isInitialized__', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queue_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'content_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'version', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'action', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'run_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queued_by', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'queued_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'is_complete', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'completed_at', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'has_succeeded', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'has_failed', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'is_overridden', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'override_auditlog_id', '' . "\0" . 'Entity\\Cms\\PublishQueue' . "\0" . 'Content');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PublishQueue $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getQueueId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueueId', array());

        return parent::getQueueId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentId($contentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentId', array($contentId));

        return parent::setContentId($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentId', array());

        return parent::getContentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', array($version));

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', array());

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setAction($action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAction', array($action));

        return parent::setAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAction', array());

        return parent::getAction();
    }

    /**
     * {@inheritDoc}
     */
    public function setRunAt($runAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRunAt', array($runAt));

        return parent::setRunAt($runAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getRunAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRunAt', array());

        return parent::getRunAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setQueuedBy($queuedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQueuedBy', array($queuedBy));

        return parent::setQueuedBy($queuedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getQueuedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueuedBy', array());

        return parent::getQueuedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setQueuedAt($queuedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQueuedAt', array($queuedAt));

        return parent::setQueuedAt($queuedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getQueuedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQueuedAt', array());

        return parent::getQueuedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsComplete($isComplete)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsComplete', array($isComplete));

        return parent::setIsComplete($isComplete);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsComplete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsComplete', array());

        return parent::getIsComplete();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompletedAt($completedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompletedAt', array($completedAt));

        return parent::setCompletedAt($completedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompletedAt', array());

        return parent::getCompletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasSucceeded($hasSucceeded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasSucceeded', array($hasSucceeded));

        return parent::setHasSucceeded($hasSucceeded);
    }

    /**
     * {@inheritDoc}
     */
    public function getHasSucceeded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHasSucceeded', array());

        return parent::getHasSucceeded();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasFailed($hasFailed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasFailed', array($hasFailed));

        return parent::setHasFailed($hasFailed);
    }

    /**
     * {@inheritDoc}
     */
    public function getHasFailed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHasFailed', array());

        return parent::getHasFailed();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOverridden($isOverridden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOverridden', array($isOverridden));

        return parent::setIsOverridden($isOverridden);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsOverridden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsOverridden', array());

        return parent::getIsOverridden();
    }

    /**
     * {@inheritDoc}
     */
    public function setOverrideAuditlogId($overrideAuditlogId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOverrideAuditlogId', array($overrideAuditlogId));

        return parent::setOverrideAuditlogId($overrideAuditlogId);
    }

    /**
     * {@inheritDoc}
     */
    public function getOverrideAuditlogId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOverrideAuditlogId', array());

        return parent::getOverrideAuditlogId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent(\Entity\Cms\Content $content = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', array($content));

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', array());

        return parent::getContent();
    }

}
